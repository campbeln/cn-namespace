/*
Copyright © 2004-2010, Nicholas Campbell
All Rights Reserved.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of Nicholas Campbell nor the names of contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System.Web;                                   //# Required to access Request, Response, Application, etc.
using System.Collections.Specialized;				//# Required to access NameValueCollection
using Cn.Collections;                               //# Required to access the MultiArray class
using Cn.Data;										//# Required to access the Picklists/MetaData class
using Cn.Configuration;								//# Required to access the Internationalization class
using Cn.Platform;                                  //# Required to access Specific.AppSettings function


namespace Cn.Web {

	///########################################################################################################################
	/// <summary>
	/// Global static web settings for the Cn.Web namespace.
	/// </summary>
	///########################################################################################################################
	/// <LastFullCodeReview>June 5, 2007</LastFullCodeReview>
	public class Settings {
	#region Settings
//! Rename to Support? Then Current to Settings?

			//#### Declare the required private variables
		private static Internationalization g_oIntl;
		private static Picklists g_oPicklists;
		private static MetaData g_oMetaData;
//		private static Current g_oSettings;

			//#### Declare the required public eNums
		#region eNums
			/// <summary>Renderer Configuration table values.</summary>
		public enum enumSettingValues : int {		//# Renderer configuration settings
				/// <summary>Defined base user interface directory.</summary>
			cnUIDirectory = 2,
				/// <summary>Defined base user interface directory, including protocol (aka scheme), host and optional port designation.</summary>
				/// <remarks>     NOTE: This differs from <c>Cn.Web.Tools.CurrentURL</c> because this returns the URL with the <c>cnUIDirectory</c> appended onto it, rather then the current URL.</remarks>
			cnUIDirectoryURL = 1,
				/// <summary>Defined CSS class name for the Renderer Form client-side error reporting popup DIVs.</summary>
			cnCSSClass_PopUpErrorDIV = 3,
				/// <summary>Defined CSS class name for the Renderer Form client-side error reporting errored inputs.</summary>
			cnCSSClass_FormInputError = 4,
				/// <summary>Defined Renderer HTML form/querystring element prefix.<para/>This functionality is provided so that form/querystring naming collisions can be avoided.</summary>
			cnDOMElementPrefix = 5,
				/// <summary>Defined HTML/CSS printable page break.</summary>
			cnHTMLPageBreak = 6
		}
		#endregion

			//#### Declare the required private constants
			//####     CSSClasses: Defines the CSS class names for an errored form input and the popup DIV with the error explination.
			//####     DOMElementPrefix: Defines the prefix applied to Document Object Model (DOM) elements that are auto-generated by Cn.Web.
			//####     HTMLPageBreak: Defines the HTML/CSS printing page break.
			//####     DefaultBreadcrumbTrailType: Defines the default view stack type.
		private const string g_cDefaultCSSClass_FormInputError = "cnFormInputError";
		private const string g_cDefaultCSSClass_PopUpErrorDIV = "cnPopUpErrorMessage";
		private const string g_cDefaultDOMElementPrefix = "";
		private const string g_cDefaultHTMLPageBreak = "<div style='page-break-after: always; height: 0px; width: 0px;'>&nbsp;</div>";
		private const Breadcrumb.enumBreadcrumbTrailTypes g_cDefaultTrailType = Breadcrumb.enumBreadcrumbTrailTypes.cnHieratical;

			//#### Declare the required private constants
		private const string g_cClassName = "Cn.Web.Settings.";


		//##########################################################################################
		//# Public Static Read-Only Properties
		//##########################################################################################
        ///############################################################
        /// <summary>
        /// Gets/sets the Cn.Web namespaces globally defined static Internationalization object.
        /// </summary>
		/// <value></value>
        ///############################################################
		/// <LastUpdated>May 9, 2007</LastUpdated>
		public static Internationalization Internationalization {
			get {
				return g_oIntl;
			}
			set {
				g_oIntl = value;
			}
		}

        ///############################################################
        /// <summary>
        /// Gets/sets the Cn.Web namespaces globally defined static Picklists object.
        /// </summary>
		/// <value></value>
        ///############################################################
		/// <LastUpdated>May 9, 2007</LastUpdated>
		public static Picklists Picklists {
			get {
				return g_oPicklists;
			}
			set {
				g_oPicklists = value;
			}
		}

        ///############################################################
        /// <summary>
        /// Gets/sets the Cn.Web namespaces globally defined static Data.MetaData object.
        /// </summary>
		/// <value></value>
        ///############################################################
		/// <LastUpdated>May 10, 2007</LastUpdated>
		public static MetaData MetaData {
			get {
				return g_oMetaData;
			}
			set {
				g_oMetaData = value;
			}
		}

        ///############################################################
        /// <summary>
        /// Gets/sets the Cn.Web namespaces globally defined static Data.MetaData object.
        /// </summary>
		/// <value></value>
        ///############################################################
		/// <LastUpdated>July 14, 2010</LastUpdated>
/*		public static Current Settings {
			get {
					//#### If our g_oSettings hasn't been setup yet, default it to a new default .Current instance
				if (g_oSettings == null) {
					g_oSettings = new Current();
				}

				return g_oSettings;
			}
			set {
				g_oSettings = value;
			}
		}
*/
        ///############################################################
        /// <summary>
        /// Gets the default view stack type.
        /// </summary>
		/// <value>Enumeration indicating the view stack instance's type.</value>
        ///############################################################
		/// <LastUpdated>August 22, 2005</LastUpdated>
		public static Breadcrumb.enumBreadcrumbTrailTypes DefaultBreadcrumbTrailType {
			get {
//!				return Specific.AppSettings["TrailType"] || g_cDefaultTrailType;
				return g_cDefaultTrailType;
			}
		}


		//##########################################################################################
		//# Public Functions
		//##########################################################################################
		///############################################################
		/// <summary>
		/// Retrieves the requested Renderer configuration value.
		/// </summary>
		/// <param name="eSetting">Enumeration representing the required setting value.</param>
		/// <returns>String representing the requested configuration value.</returns>
		/// <exception cref="Cn.CnException">Thrown when the passed <paramref>eSetting</paramref> is unreconized.</exception>
		///############################################################
		/// <LastUpdated>June 18, 2010</LastUpdated>
		public static string Value(enumSettingValues eSetting) {
			string sReturn = "";

				//#### Determine the value of the passed eSetting, setting our return value accordingly
				//####     NOTE: We utilize our own property for this so that the Configuration/Internationalization picklsit is initilized if it hasn't already been
			switch(eSetting) {
				case enumSettingValues.cnUIDirectoryURL: {
//				    sReturn = "http://" + HttpContext.Current.Request.ServerVariables["Server_Name"] + g_oRendererSettings.Decoder("GeneralSettings", "BaseDirectory") + "/";

						//#### Set our sReturn value to the .ProtocolHostPortURL plus the .cnUIDirectory
					sReturn = Web.Tools.ProtocolHostPortURL() + Specific.AppSettings("CnUIDirectory");
					break;
				}
				case enumSettingValues.cnUIDirectory: {
					sReturn = Specific.AppSettings("CnUIDirectory");
					break;
				}
				case enumSettingValues.cnDOMElementPrefix: {
					sReturn = Data.Tools.MakeString(Specific.AppSettings("DOMElementPrefix"), g_cDefaultDOMElementPrefix);
					break;
				}
				case enumSettingValues.cnHTMLPageBreak: {
					sReturn = Data.Tools.MakeString(Specific.AppSettings("HTMLPageBreak"), g_cDefaultHTMLPageBreak);
					break;
				}
				case enumSettingValues.cnCSSClass_PopUpErrorDIV: {
					sReturn = Data.Tools.MakeString(Specific.AppSettings("CSSClass_PopUpErrorDIV"), g_cDefaultCSSClass_PopUpErrorDIV);
					break;
				}
				case enumSettingValues.cnCSSClass_FormInputError: {
					sReturn = Data.Tools.MakeString(Specific.AppSettings("CSSClass_FormInputError"), g_cDefaultCSSClass_FormInputError);
					break;
				}

					//#### Else the passed eSetting was unreconized, so raise the error
				default: {
					Internationalization.RaiseDefaultError(g_cClassName + "Value", Internationalization.enumInternationalizationValues.cnDeveloperMessages_General_UnknownValue, "eSetting", Data.Tools.MakeString(eSetting, "[?]"));
					break;
				}
			}

				//#### Return the above determined sReturn value to the caller
			return sReturn;
		}

        ///############################################################
		/// <summary>
		/// Safely retrieves the defined End User Messages Language Code.
		/// </summary>
		/// <remarks>
		/// There are two Language Codes maintained within the Cn.Web namespace:
		/// <para/>    1) The Developer's Language Code, which is stored within the global static Cn.Web.Settings.Internationalization instance.
		/// <para/>    2) The End User Messages Language Code, which is stored within Cn.Web.Settings.Current instances. This value defaults to the Developer's Language Code.
		/// <para/>This method safely collects the defined End User Messages Language Code from the passed Cn.Web.Settings.Current instance. If the passed Cn.Web.Settings.Current instance is null, then the Language Code is sourced from the Developer's Language Code.
		/// </remarks>
		/// <param name="oSettings">Cn.Web.Settings.Current instance representing the current enviroment.</param>
		/// <returns>String representing the defined End User Messages Language Code.</returns>
        ///############################################################
		/// <LastUpdated>August 8, 2007</LastUpdated>
		public static string EndUserMessagesLanguageCode(Current oSettings) {
			string sReturn;

				//#### If the passed oSettings is non-null, set our sReturn value to it's .EndUserMessagesLanguageCode
			if (oSettings != null) {
				sReturn = oSettings.EndUserMessagesLanguageCode;
			}
				//#### Else collect the defined (or default) .LanguageCode from the global static Internationalization instance
			else {
				sReturn = g_oIntl.LanguageCode;
			}

				//#### Return the above determined sReturn value to the caller
			return sReturn;
		}

        ///############################################################
		/// <summary>
		/// Populates the global variables holding the <c>Cn.Web</c> settings.
		/// </summary>
		/// <remarks>
		/// NOTE: This function relies on the default table names for the system settings ("cnInternationalization", "cnRendererConfiguration", "cnHolidayCalculations", and "cnPicklists"). If you have chosen to rename your system configuration tables, you will need to utilize this function's sibling implementation.
		/// <para/>NOTE: This function assumes that the Default Internationalization table name is "cnInternationalization".
		/// </remarks>
		/// <param name="oDBMS"><c>DBMS</c> instance representing an active connection to the related data source.</param>
		/// <param name="bInternationalizationDefaultData">Boolean value representing if the Default Internationalization global variable is to be updated.</param>
		/// <param name="bInternationalization">Boolean value representing if the <paramref>sSystemName</paramref>'s Internationalization global variable is to be updated.</param>
		/// <param name="bPicklists">Boolean value representing if the persistent Picklists's (named after the <paramref>sSystemName</paramref>) global variable is to be updated.</param>
		/// <param name="bMetaData">Boolean value representing if the <paramref>sSystemName</paramref>'s DataSource MetaData global variable is to be updated.</param>
		/// <param name="eDataSource">Enumeration representing the source the <paramref>oDataSourceMetaData</paramref> was generated from.</param>
		/// <param name="sDataSourceContainerName">String representing the name of the data source's container.</param>
		/// <exception cref="Cn.CnException">Thrown when the passed <paramref>eDataSource</paramref> is unsupported or unreconized.</exception>
        ///############################################################
		/// <LastUpdated>May 28, 2007</LastUpdated>
		public static void GetData(DBMS oDBMS, bool bInternationalizationDefaultData, bool bInternationalization, bool bPicklists, bool bMetaData, enumDataSource eDataSource, string sDataSourceContainerName) {
			string sInternationalizationDefaultDataTableName = "";
			string sInternationalizationTableName = "";
			string sMetaDataTableName = "";
			string sPicklistsTableName = "";

				//#### Setup the local s*TableName variables to the default names based on the passed information (skipping any set to false)
			if (bInternationalizationDefaultData) {
				sInternationalizationDefaultDataTableName = "cnInternationalization";
			}
			if (bInternationalization) {
				sInternationalizationTableName = "cnInternationalization";
			}
			if (bPicklists) {
				sPicklistsTableName = "cnPicklists";
			}
			if (bMetaData) {
					//#### Determine the eDataSource, setting sMetaDataTableName accordingly
				switch (eDataSource) {
					case enumDataSource.cnSQLServer: {
						sMetaDataTableName = sDataSourceContainerName + ".INFORMATION_SCHEMA.COLUMNS";
						break;
					}
					case enumDataSource.cnOracle: {
						sMetaDataTableName = "all_tab_columns";
						break;
					}

						//#### Else the passed eDataSource is unsupported or unreconized, so raise the error (based on the passed sSystemName)
					default: {
						Internationalization.RaiseDefaultError(g_cClassName + "", Internationalization.enumInternationalizationValues.cnDeveloperMessages_General_UnknownValue, "eDataSource", Data.Tools.MakeString(eDataSource, ""));
						break;
					}
				}
			}

				//#### Pass the call off to our sibling implementation to do the actual work
			GetData(oDBMS,
				sInternationalizationDefaultDataTableName,
				sInternationalizationTableName,
				sPicklistsTableName,
				sMetaDataTableName,
				eDataSource
			);
		}

        ///############################################################
		/// <summary>
		/// Populates the global variables holding the <c>Cn.Web</c> settings.
		/// </summary>
		/// <param name="oDBMS"><c>DBMS</c> instance representing an active connection to the related data source.</param>
		/// <param name="sInternationalizationDefaultDataTableName">String representing the name of the Default Internationalization table.</param>
		/// <param name="sInternationalizationTableName">String representing the name of the <paramref>sSystemName</paramref>'s Internationalization table.</param>
		/// <param name="sPicklistsTableName">String representing the name of the Picklists table.</param>
		/// <param name="sMetaDataTableName">String representing the name of the <paramref>sSystemName</paramref>'s DataSource MetaData view/table.</param>
		/// <param name="eDataSource">Enumeration representing the source the <paramref>oDataSourceMetaData</paramref> was generated from.</param>
        ///############################################################
		/// <LastUpdated>May 29, 2007</LastUpdated>
		public static void GetData(DBMS oDBMS, string sInternationalizationDefaultDataTableName, string sInternationalizationTableName, string sPicklistsTableName, string sMetaDataTableName, enumDataSource eDataSource) {
			MultiArray[] a_oResults;
			string sSQL = "";
			int iDefaultInternationalization = -1;
			int iInternationalization = -1;
			int iMetaData = -1;
			int iPicklists = -1;
			int i = 0;

				//#### Create the required sSQL statement bassed on the passed information (skipping any with blank table names)
			if (! string.IsNullOrEmpty(sInternationalizationDefaultDataTableName)) {
				sSQL += Internationalization.GetData.SQLStatement(sInternationalizationDefaultDataTableName) + "; ";
				iDefaultInternationalization = i;
				i++;
			}
			if (! string.IsNullOrEmpty(sInternationalizationTableName)) {
				sSQL += Internationalization.GetData.SQLStatement(sInternationalizationTableName) + "; ";
				iInternationalization = i;
				i++;
			}
			if (! string.IsNullOrEmpty(sPicklistsTableName)) {
				sSQL += Picklists.GetData.SQLStatement(sPicklistsTableName) + "; ";
				iPicklists = i;
				i++;
			}
			if (! string.IsNullOrEmpty(sMetaDataTableName)) {
				sSQL += MetaData.GetData.SQLStatement(sMetaDataTableName, eDataSource) + "; ";
				iMetaData = i;
			  //i++;
			}

				//#### Collect the a_oResults based on the above created sSQL statement
			a_oResults = oDBMS.GetMultiArrays(sSQL);

				//#### GetData the various configuration structures with the data within the a_oResults (skipping any with blank table names)
			if (iDefaultInternationalization != -1) {
				Internationalization.DefaultData = a_oResults[iDefaultInternationalization];
			}
			if (iInternationalization != -1) {
				Internationalization = new Internationalization(a_oResults[iInternationalization]);
			}
			if (iPicklists != -1) {
				Picklists = new Picklists(a_oResults[iPicklists]);
			}
			if (iMetaData != -1) {
				MetaData = new MetaData(a_oResults[iMetaData], eDataSource);

					//#### If Web.Settings.Picklists was also set above, .Set(the)RelatedPicklists now
				if (iPicklists != -1) {
					MetaData.SetRelatedPicklists(Picklists);
				}
			}
		}

		///############################################################
		/// <summary>
		/// Converts the data stored within the global variables holding the <c>Cn.Web</c> settings into SQL statement(s).
		/// </summary>
		/// <param name="sInternationalizationDefaultDataTableName">String representing the name of the Default Internationalization table.</param>
		/// <param name="sInternationalizationTableName">String representing the name of the <paramref>sSystemName</paramref>'s Internationalization table.</param>
		/// <param name="sPicklistsTableName">String representing the name of the Picklists table.</param>
		/// <param name="eStatementType">Enumeration representing the desired SQL statement type.</param>
		/// <returns>String representing SQL INSERT statements for the data within the global variables holding the <c>Cn.Web</c> settings.</returns>
		///############################################################
		/// <LastUpdated>January 4, 2010</LastUpdated>
		public static string GenerateSQLStatements(string sInternationalizationDefaultDataTableName, string sInternationalizationTableName, string sPicklistsTableName, MultiArray.enumStatementTypes eStatementType) {
			string sReturn = "";

				//#### If the caller passed in a sInternationalizationDefaultDataTableName and we have some .DefaultData to .SQL from, append it onto our sReturn value
			sInternationalizationDefaultDataTableName = Data.Tools.MakeString(sInternationalizationDefaultDataTableName, "");
			if (sInternationalizationDefaultDataTableName.Length > 0 && Internationalization.DefaultData != null) {
				sReturn += "\n\n" +
					"--##################################################\n" +
					"--# Internationalization.DefaultData Table: " + sInternationalizationDefaultDataTableName + "\n" +
					"--##################################################\n" +
					string.Join(";\n", Internationalization.DefaultData.GenerateSQLStatements(sInternationalizationDefaultDataTableName, "", eStatementType));
			}

				//#### If the caller passed in a sInternationalizationTableName and we have some .Internationalization data to .SQL from, append it onto our sReturn value
			sInternationalizationTableName = Data.Tools.MakeString(sInternationalizationTableName, "");
			if (sInternationalizationTableName.Length > 0 && Internationalization != null) {
				sReturn += "\n\n" +
					"--##################################################\n" +
					"--# Internationalization Table: " + sInternationalizationTableName + "\n" +
					"--##################################################\n" +
					string.Join(";\n", Internationalization.Data.GenerateSQLStatements(sInternationalizationTableName, "", eStatementType));
			}

				//#### If the caller passed in a sPicklistsTableName and we have some .Picklists data to .SQL from, append it onto our sReturn value
			sPicklistsTableName = Data.Tools.MakeString(sPicklistsTableName, "");
			if (sPicklistsTableName.Length > 0 && Picklists != null) {
				sReturn += "\n\n" +
					"--##################################################\n" +
					"--# Picklists Table: " + sPicklistsTableName + "\n" +
					"--##################################################\n" +
					string.Join(";\n", Picklists.Data.GenerateSQLStatements(sPicklistsTableName, "", eStatementType));
			}

				//#### Return the above determined sReturn value to the caller
			return sReturn;
		}

	#endregion


		///########################################################################################################################
		/// <summary>
		/// Instance-specific web settings for the Cn.Web namespace.
		/// </summary>
		///########################################################################################################################
		/// <LastFullCodeReview>June 5, 2007</LastFullCodeReview>
		public class Current {
				//#### Declare the required private variables
			private HttpResponse g_oResponse;
			private HttpRequest g_oRequest;
			private Breadcrumb g_oBreadcrumb;
			private string g_sEndUserMessagesLanguageCode;		//# Allows for overrides within Input & JavaScript
			private int g_iGeneratedJavaScriptFileReferences;
			private bool g_bStrictPicklistDecodes;				//# Utilized within Inputs against provided PicklistData (not against Picklists class instances!)
			private bool g_bIsReadOnly;
			private bool g_bDebug;


			//##########################################################################################
			//# Class Functions
			//##########################################################################################
			///############################################################
			/// <summary>
			/// Initializes the class.
			/// </summary>
			/// <seealso cref="Cn.Web.Settings.Current.Reset()"/>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public Current() {
					//#### Pass the call off to .Reset
				Reset();
			}

			///############################################################
			/// <summary>
			/// Initializes the class based on the provided column names.
			/// </summary>
			/// <param name="oBreadcrumb">Breadcrumb object related to this instance.</param>
			///############################################################
			/// <LastUpdated>November 6, 2009</LastUpdated>
            public Current(Breadcrumb oBreadcrumb) {
					//#### Pass the call off to .Reset
                Reset(oBreadcrumb);
			}

			///############################################################
			/// <summary>
			/// Resets the class to its initilized state.
			/// </summary>
			///############################################################
			/// <LastUpdated>November 9, 2009</LastUpdated>
			public void Reset() {
					//#### Pass the call off to .Reset (along with a new default Breadcrumb instance)
                Reset(new Breadcrumb());
			}

			///############################################################
			/// <summary>
			/// Resets the class to its initilized state based on the provided data.
			/// </summary>
			/// <param name="oBreadcrumb">Breadcrumb object related to this instance.</param>
			///############################################################
			/// <LastUpdated>November 9, 2009</LastUpdated>
            public void Reset(Breadcrumb oBreadcrumb) {
					//#### (Re)Init the global variables
				g_oResponse = HttpContext.Current.Response;
				g_oRequest = HttpContext.Current.Request;
				g_oBreadcrumb = oBreadcrumb;
				g_iGeneratedJavaScriptFileReferences = 0;
				g_bStrictPicklistDecodes = false;
				g_bIsReadOnly = false;
				g_bDebug = false;

					//#### Set g_sEndUserMessagesLanguageCode via it's related property so that the null-string will be transformed into the defined default EndUserMessagesLanguageCode
				EndUserMessagesLanguageCode = "";

					//#### If there is a global .Picklists set, re-default the g_bStrictPicklistDecodes to it's .StrictDecodes
				if (Picklists != null) {
					g_bStrictPicklistDecodes = Picklists.StrictDecodes;
				}
			}


			//##########################################################################################
			//# Public Properties
			//##########################################################################################
			///############################################################
			/// <summary>
			/// Gets/sets the <c>HttpResponse</c> object related to this instance.
			/// </summary>
			/// <remarks>
			/// This value defaults to <c>HttpContext.Current.Response</c>.
			/// </remarks>
			/// <value><c>HttpResponse</c> object that represents this instance's <c>Response</c> object.</value>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public HttpResponse Response {
				get { return g_oResponse; }
				set { g_oResponse = value; }
			}

			///############################################################
			/// <summary>
			/// Gets/sets the <c>HttpRequest</c> object related to this instance.
			/// </summary>
			/// <remarks>
			/// This value defaults to <c>HttpContext.Current.Request</c>.
			/// </remarks>
			/// <value><c>HttpRequest</c> object that represents this instance's <c>Request</c> object.</value>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public HttpRequest Request {
				get { return g_oRequest; }
				set { g_oRequest = value; }
			}

			///############################################################
			/// <summary>
			/// Gets/sets the <c>Breadcrumb</c> trail related to this instance.
			/// </summary>
			/// <remarks>
			/// This value defaults to a null reference.
			/// </remarks>
			/// <value>Breadcrumb object that represents this instance's Breadcrumb trail.</value>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public Breadcrumb Breadcrumb {
				get { return g_oBreadcrumb; }
				set { g_oBreadcrumb = value; }
			}

			///############################################################
			/// <summary>
			/// Gets/sets the end user language code used by this instance.
			/// </summary>
			/// <remarks>
			/// This value defaults to an unreconized language code (a null-string, which in turn get's transformed into a valid language code as described below).
			/// <para/>If an unreconized language code is passed, the default language code (as defined within this instance's Internationalization data, or failing that within the local constant) is used.
			/// <para/>
			/// <para/>This value is utilized by <c>Cn.Web.Renderer.Form</c> as it's own <c>EndUserMessagesLanguageCode</c> property and is therefore applied globally as the end user language code.
			/// </remarks>
			/// <value>String representing the end user language code used by this instance.</value>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public string EndUserMessagesLanguageCode {
				get { return g_sEndUserMessagesLanguageCode; }
				set { g_sEndUserMessagesLanguageCode = Internationalization.ValidateLanguageCode(value); }
			}

			///############################################################
			/// <summary>
			/// Gets/sets a value indicating which JavaScript file references have been rendered.
			/// </summary>
			/// <remarks>
			/// This value defaults to 0.
			/// <para/>
			/// <para/>This value is utilized internally by <c>Cn.Web.JavaScript</c> and should not be otherwise modifed.
			/// </remarks>
			/// <value>Bitwise integer value indicating which JavaScript file references have been rendered.</value>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public int GeneratedJavaScriptFileReferences {
				get { return g_iGeneratedJavaScriptFileReferences; }
				set { g_iGeneratedJavaScriptFileReferences = value; }
			}

			///############################################################
			/// <summary>
			/// Gets/sets a boolean value indicating if <c>Picklists.Decodes</c> utilize strict decodes.
			/// </summary>
			/// <remarks>
			/// This is utilized within <c>Cn.Web.Inputs</c> when rendering <c>IsReadOnly</c> inputs. This value defaults to the <c>Cn.Web.Settings.Picklists</c> currently set <c>StrictDecodes</c>, or false.
			/// <para/>This logic is doubly defined here because of the way Picklist data is provided to Inputs.Builder, which is via a MultiArray containing the related Picklist and not via a native Picklist object (which includes it's definition for StrictDecodes). This approach allows the developer to provide ad-hoc picklists at run-time, which also need the ability to allow for StrictDecodes.
			/// <para/>
			/// <para/>When "strict decodes" is enabled, only values present within the referenced picklist are returned from <c>Decode</c> calls.
			/// <para/>In "strict decodes" mode: If the passed value to decode is not within the referenced picklist, a null-string is returned.
			/// <para/>In non-"strict decodes" mode: If the passed value to decode is not within the referenced picklist, the passed value is returned.
			/// </remarks>
			/// <value>Boolean value signaling if <c>Picklists.Decodes</c> utilize strict decodes by default.<para/>Returns true if this instance utilizes strict decodes by default, or false if it does not.</value>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public bool StrictPicklistDecodes {
				get { return g_bStrictPicklistDecodes; }
				set { g_bStrictPicklistDecodes = value; }
			}

			///############################################################
			/// <summary>
			/// Gets/sets a value indicating if we are in read only mode.
			/// </summary>
			/// <remarks>
			/// This value defaults to false.
			/// </remarks>
			/// <value>Boolean value indicating if we are in read only mode.</value>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public bool IsReadOnly {
				get { return g_bIsReadOnly; }
				set { g_bIsReadOnly = value; }
			}

			///############################################################
			/// <summary>
			/// Gets/sets a value indicating if we are in debug mode.
			/// </summary>
			/// <remarks>
			/// This value defaults to false.
			/// </remarks>
			/// <value>Boolean value indicating if we are in debug mode.</value>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public bool Debug {
				get { return g_bDebug; }
				set { g_bDebug = value; }
			}


			//##########################################################################################
			//# Public Read-Only Properties
			//##########################################################################################
			///############################################################
			/// <summary>
			/// Gets the carrage return/line feed character(s) utilized by this instance.
			/// </summary>
			/// <value>String representing the carrage return/line feed character(s) utilized by this instance.</value>
			///############################################################
			/// <LastUpdated>June 5, 2007</LastUpdated>
			public string CRLF {
				get {
						//#### Based on the value of g_bDebug, return a CRLF or a null-string to the caller
					return (g_bDebug ? "\n" : "");
				}
			}

		} //# public class Current

	} //# class Settings

} //# namespace Cn.Configuration
